- name: Using default deploy method
  community.docker.docker_stack:
    state: present
    name: directus
    resolve_image: always
    compose:
      - "{{ role_path }}/files/docker-compose.yaml"
  environment:
    ADMIN_PASSWORD: "{{ service.admin_password }}"
    KEYCLOAK_SECRET: "{{ service.keycloak_secret }}"
    SECRET: "{{ service.secret }}"
    KEY: "{{ service.key }}"
    DATABASE_INIT: "{{ service.database.init }}"
    DATABASE_PASSWORD: "{{ service.database.password }}"
    SMTP_IT_PASSWORD: "{{ general.mail.it_password }}"

- name: Wait for directus to be available
  ansible.builtin.wait_for:
    port: 8001

- name: Get container id
  ansible.builtin.command:
    cmd: docker service ps directus_directus --filter desired-state=running -q
  changed_when: false
  register: ps

- name: Compute container name
  ansible.builtin.set_fact:
    container_name: directus_directus.1.{{ ps.stdout }}

# The schema is downloaded instead of cloning the repository to avoid having the sample data on the server.
- name: Download schema
  ansible.builtin.get_url:
    url: https://raw.githubusercontent.com/clicepfl/directus-config/main/snapshot.yaml
    dest: "{{ role_path }}/files/snapshot.yaml"
    mode: 777

- name: Copy schema into container
  community.docker.docker_container_copy_into:
    container: "{{ container_name }}"
    container_path: /snapshot.yaml
    path: "{{ role_path }}/files/snapshot.yaml"

- name: Apply schema
  community.docker.docker_container_exec:
    container: "{{ container_name }}"
    command: npx directus schema apply /snapshot.yaml -y

- name: Download flows
  ansible.builtin.get_url:
    url: https://raw.githubusercontent.com/clicepfl/directus-config/main/flows.sql
    dest: "{{ role_path }}/files/snapshot.yaml"
    mode: 777

- name: Copy flows into container
  community.docker.docker_container_copy_into:
    container: "{{ container_name }}"
    container_path: /flows.sql
    path: "{{ role_path }}/files/flows.sql"

- name: Apply flows script
  community.docker.docker_container_exec:
    container: "{{ container_name }}"
    command: psql -U directus_user directus_data -f /flows.sql

- name: Restart container
  community.docker.docker_container:
    name: "{{ container_name }}"
    state: stopped # The swarm will take care of booting up a new container
